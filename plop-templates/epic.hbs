import { ofType } from 'redux-observable';
import io from 'socket.io-client';
import { fromEvent, of } from 'rxjs';
import {
  withLatestFrom, switchMap, map, concatMap,
} from 'rxjs/operators';

import {
  ESTABLISH_CONNECTION, CLOSE_CONNECTION, GET_INIT_{{upperCase envKey}}_{{constantCase serviceKey}}_DATA, SET_INIT_{{upperCase envKey}}_{{constantCase serviceKey}}_DATA,
} from '../actionTypes';
import { notify{{pascalCase serviceKey}}{{pascalCase envKey}}ChangesSelector, {{camelCase serviceKey}}{{pascalCase envKey}}StatusSelector } from '../selectors/{{camelCase serviceKey}}{{pascalCase envKey}}.selectors';
import { getInitDataAction, setResponseAction, setInitDataAction, showNotificationAction } from '../actions';
import { SERVICE_KEY } from '../../consts';

let socket;
const establishConnection = action$ => action$.pipe(
  ofType(ESTABLISH_CONNECTION),
  switchMap(() => {
    socket = io(`ws://${process.env.SERVER_ADDRESS}`, { transports: ['websocket'], path: '/version-tracker/socket.io' });
    return fromEvent(socket, 'connect');
  }),
  switchMap(() => [getInitDataAction('{{envKey}}', SERVICE_KEY.{{constantCase serviceKey}})]),
);

const closeConnection = action$ => action$.pipe(
  ofType(CLOSE_CONNECTION),
  switchMap(() => fromEvent(socket, 'disconnect')),
);

const getInit{{pascalCase envKey}}{{pascalCase serviceKey}}Data = action$ => action$.pipe(
  ofType(GET_INIT_{{upperCase envKey}}_{{constantCase serviceKey}}_DATA),
  map(message => setInitDataAction('{{envKey}}', SERVICE_KEY.{{constantCase serviceKey}}, message)),
);

const start{{pascalCase serviceKey}}{{pascalCase envKey}}Listen = (action$, state$) => action$.pipe(
  ofType(SET_INIT_{{upperCase envKey}}_{{constantCase serviceKey}}_DATA),
  switchMap(() => fromEvent(socket, `[{{envKey}}] ${SERVICE_KEY.{{constantCase serviceKey}}{{curly}} pong`)),
  withLatestFrom(state$),
  map(([message, state]) => [message, notify{{pascalCase serviceKey}}{{pascalCase envKey}}ChangesSelector(state), {{camelCase serviceKey}}{{pascalCase envKey}}StatusSelector(state)]),
  concatMap(([message, notifyChanges, prevStatus]) => {
    if (notifyChanges && prevStatus !== null && prevStatus !== message.status) {
      return of(
        showNotificationAction({ status: message.status, serviceName: '{{titleCase serviceName}}', downtimeDuration: message.downtimeDuration }),
        setResponseAction('{{envKey}}', SERVICE_KEY.{{constantCase serviceKey}}, message),
      )
    }

    return of(setResponseAction('{{envKey}}', SERVICE_KEY.{{constantCase serviceKey}}, message));
  })
);

export default [getInit{{pascalCase envKey}}{{pascalCase serviceKey}}Data, establishConnection, closeConnection, start{{pascalCase serviceKey}}{{pascalCase envKey}}Listen];
